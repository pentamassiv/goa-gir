// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ..
// from ../gir-files
// DO NOT EDIT

use crate::{Manager,Object};
use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_,fmt,mem::transmute,pin::Pin,ptr};

glib::wrapper! {
    #[doc(alias = "GoaClient")]
    pub struct Client(Object<ffi::GoaClient, ffi::GoaClientClass>);

    match fn {
        type_ => || ffi::goa_client_get_type(),
    }
}

impl Client {
    #[doc(alias = "goa_client_new_sync")]
    pub fn new_sync(cancellable: Option<&impl IsA<gio::Cancellable>>) -> Result<Client, glib::Error> {
        assert_initialized_main_thread!();
        unsafe {
            let mut error = ptr::null_mut();
            let ret = ffi::goa_client_new_sync(cancellable.map(|p| p.as_ref()).to_glib_none().0, &mut error);
            if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) }
        }
    }

    #[doc(alias = "goa_client_get_accounts")]
    #[doc(alias = "get_accounts")]
    pub fn accounts(&self) -> Vec<Object> {
        unsafe {
            FromGlibPtrContainer::from_glib_full(ffi::goa_client_get_accounts(self.to_glib_none().0))
        }
    }

    #[doc(alias = "goa_client_get_manager")]
    #[doc(alias = "get_manager")]
    pub fn manager(&self) -> Option<Manager> {
        unsafe {
            from_glib_none(ffi::goa_client_get_manager(self.to_glib_none().0))
        }
    }

    //#[doc(alias = "goa_client_get_object_manager")]
    //#[doc(alias = "get_object_manager")]
    //pub fn object_manager(&self) -> /*Ignored*/Option<gio::DBusObjectManager> {
    //    unsafe { TODO: call ffi:goa_client_get_object_manager() }
    //}

    #[cfg(feature = "v3_6")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v3_6")))]
    #[doc(alias = "goa_client_lookup_by_id")]
    pub fn lookup_by_id(&self, id: &str) -> Option<Object> {
        unsafe {
            from_glib_full(ffi::goa_client_lookup_by_id(self.to_glib_none().0, id.to_glib_none().0))
        }
    }

    #[doc(alias = "goa_client_new")]
    pub fn new<P: FnOnce(Result<Client, glib::Error>) + 'static>(cancellable: Option<&impl IsA<gio::Cancellable>>, callback: P) {
        assert_initialized_main_thread!();
        
                let main_context = glib::MainContext::ref_thread_default();
                let is_main_context_owner = main_context.is_owner();
                let has_acquired_main_context = (!is_main_context_owner)
                    .then(|| main_context.acquire().ok())
                    .flatten();
                assert!(
                    is_main_context_owner || has_acquired_main_context.is_some(),
                    "Async operations only allowed if the thread is owning the MainContext"
                );
        
        let user_data: Box_<glib::thread_guard::ThreadGuard<P>> = Box_::new(glib::thread_guard::ThreadGuard::new(callback));
        unsafe extern "C" fn new_trampoline<P: FnOnce(Result<Client, glib::Error>) + 'static>(_source_object: *mut glib::gobject_ffi::GObject, res: *mut gio::ffi::GAsyncResult, user_data: glib::ffi::gpointer) {
            let mut error = ptr::null_mut();
            let ret = ffi::goa_client_new_finish(res, &mut error);
            let result = if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) };
            let callback: Box_<glib::thread_guard::ThreadGuard<P>> = Box_::from_raw(user_data as *mut _);
            let callback: P = callback.into_inner();
            callback(result);
        }
        let callback = new_trampoline::<P>;
        unsafe {
            ffi::goa_client_new(cancellable.map(|p| p.as_ref()).to_glib_none().0, Some(callback), Box_::into_raw(user_data) as *mut _);
        }
    }

    
    pub fn new_future() -> Pin<Box_<dyn std::future::Future<Output = Result<Client, glib::Error>> + 'static>> {

        skip_assert_initialized!();
        Box_::pin(gio::GioFuture::new(&(), move |_obj, cancellable, send| {
            Self::new(
                Some(cancellable),
                move |res| {
                    send.resolve(res);
                },
            );
        }))
    }

    #[doc(alias = "account-added")]
    pub fn connect_account_added<F: Fn(&Self, &Object) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn account_added_trampoline<F: Fn(&Client, &Object) + 'static>(this: *mut ffi::GoaClient, object: *mut ffi::GoaObject, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this), &from_glib_borrow(object))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"account-added\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(account_added_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "account-changed")]
    pub fn connect_account_changed<F: Fn(&Self, &Object) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn account_changed_trampoline<F: Fn(&Client, &Object) + 'static>(this: *mut ffi::GoaClient, object: *mut ffi::GoaObject, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this), &from_glib_borrow(object))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"account-changed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(account_changed_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "account-removed")]
    pub fn connect_account_removed<F: Fn(&Self, &Object) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn account_removed_trampoline<F: Fn(&Client, &Object) + 'static>(this: *mut ffi::GoaClient, object: *mut ffi::GoaObject, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this), &from_glib_borrow(object))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"account-removed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(account_removed_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "object-manager")]
    pub fn connect_object_manager_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_object_manager_trampoline<F: Fn(&Client) + 'static>(this: *mut ffi::GoaClient, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::object-manager\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_object_manager_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for Client {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Client")
    }
}
