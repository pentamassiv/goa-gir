// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ..
// from ../gir-files
// DO NOT EDIT

use glib::{prelude::*,translate::*};
use std::{boxed::Box as Box_,fmt,pin::Pin,ptr};

glib::wrapper! {
    #[doc(alias = "GoaPasswordBased")]
    pub struct PasswordBased(Interface<ffi::GoaPasswordBased, ffi::GoaPasswordBasedIface>);

    match fn {
        type_ => || ffi::goa_password_based_get_type(),
    }
}

impl PasswordBased {
        pub const NONE: Option<&'static PasswordBased> = None;
    

    //#[doc(alias = "goa_password_based_interface_info")]
    //pub fn interface_info() -> /*Ignored*/Option<gio::DBusInterfaceInfo> {
    //    unsafe { TODO: call ffi:goa_password_based_interface_info() }
    //}

    //#[doc(alias = "goa_password_based_override_properties")]
    //pub fn override_properties(klass: /*Ignored*/&mut glib::ObjectClass, property_id_begin: u32) -> u32 {
    //    unsafe { TODO: call ffi:goa_password_based_override_properties() }
    //}
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::PasswordBased>> Sealed for T {}
}

pub trait PasswordBasedExt: IsA<PasswordBased> + sealed::Sealed + 'static {
    #[doc(alias = "goa_password_based_call_get_password")]
    fn call_get_password<P: FnOnce(Result<glib::GString, glib::Error>) + 'static>(&self, arg_id: &str, cancellable: Option<&impl IsA<gio::Cancellable>>, callback: P) {
        
                let main_context = glib::MainContext::ref_thread_default();
                let is_main_context_owner = main_context.is_owner();
                let has_acquired_main_context = (!is_main_context_owner)
                    .then(|| main_context.acquire().ok())
                    .flatten();
                assert!(
                    is_main_context_owner || has_acquired_main_context.is_some(),
                    "Async operations only allowed if the thread is owning the MainContext"
                );
        
        let user_data: Box_<glib::thread_guard::ThreadGuard<P>> = Box_::new(glib::thread_guard::ThreadGuard::new(callback));
        unsafe extern "C" fn call_get_password_trampoline<P: FnOnce(Result<glib::GString, glib::Error>) + 'static>(_source_object: *mut glib::gobject_ffi::GObject, res: *mut gio::ffi::GAsyncResult, user_data: glib::ffi::gpointer) {
            let mut error = ptr::null_mut();
            let mut out_password = ptr::null_mut();
            let _ = ffi::goa_password_based_call_get_password_finish(_source_object as *mut _, &mut out_password, res, &mut error);
            let result = if error.is_null() { Ok(from_glib_full(out_password)) } else { Err(from_glib_full(error)) };
            let callback: Box_<glib::thread_guard::ThreadGuard<P>> = Box_::from_raw(user_data as *mut _);
            let callback: P = callback.into_inner();
            callback(result);
        }
        let callback = call_get_password_trampoline::<P>;
        unsafe {
            ffi::goa_password_based_call_get_password(self.as_ref().to_glib_none().0, arg_id.to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, Some(callback), Box_::into_raw(user_data) as *mut _);
        }
    }

    
    fn call_get_password_future(&self, arg_id: &str) -> Pin<Box_<dyn std::future::Future<Output = Result<glib::GString, glib::Error>> + 'static>> {

        let arg_id = String::from(arg_id);
        Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
            obj.call_get_password(
                &arg_id,
                Some(cancellable),
                move |res| {
                    send.resolve(res);
                },
            );
        }))
    }

    #[doc(alias = "goa_password_based_call_get_password_sync")]
    fn call_get_password_sync(&self, arg_id: &str, cancellable: Option<&impl IsA<gio::Cancellable>>) -> Result<glib::GString, glib::Error> {
        unsafe {
            let mut out_password = ptr::null_mut();
            let mut error = ptr::null_mut();
            let is_ok = ffi::goa_password_based_call_get_password_sync(self.as_ref().to_glib_none().0, arg_id.to_glib_none().0, &mut out_password, cancellable.map(|p| p.as_ref()).to_glib_none().0, &mut error);
            debug_assert_eq!(is_ok == glib::ffi::GFALSE, !error.is_null());
            if error.is_null() { Ok(from_glib_full(out_password)) } else { Err(from_glib_full(error)) }
        }
    }

    //#[doc(alias = "goa_password_based_complete_get_password")]
    //fn complete_get_password(&self, invocation: /*Ignored*/gio::DBusMethodInvocation, password: &str) {
    //    unsafe { TODO: call ffi:goa_password_based_complete_get_password() }
    //}

    //#[cfg(feature = "v3_6")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v3_6")))]
    //#[doc(alias = "handle-get-password")]
    //fn connect_handle_get_password<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //}
}

impl<O: IsA<PasswordBased>> PasswordBasedExt for O {}

impl fmt::Display for PasswordBased {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("PasswordBased")
    }
}
