// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ..
// from ../gir-files
// DO NOT EDIT

use glib::{prelude::*,translate::*};
#[cfg(feature = "v3_18")]
#[cfg_attr(docsrs, doc(cfg(feature = "v3_18")))]
use glib::{signal::{connect_raw, SignalHandlerId}};
use std::{boxed::Box as Box_,fmt,pin::Pin,ptr};
#[cfg(feature = "v3_18")]
#[cfg_attr(docsrs, doc(cfg(feature = "v3_18")))]
use std::{mem::transmute};

glib::wrapper! {
    #[doc(alias = "GoaTicketing")]
    pub struct Ticketing(Interface<ffi::GoaTicketing, ffi::GoaTicketingIface>);

    match fn {
        type_ => || ffi::goa_ticketing_get_type(),
    }
}

impl Ticketing {
        pub const NONE: Option<&'static Ticketing> = None;
    

    //#[doc(alias = "goa_ticketing_interface_info")]
    //pub fn interface_info() -> /*Ignored*/Option<gio::DBusInterfaceInfo> {
    //    unsafe { TODO: call ffi:goa_ticketing_interface_info() }
    //}

    //#[doc(alias = "goa_ticketing_override_properties")]
    //pub fn override_properties(klass: /*Ignored*/&mut glib::ObjectClass, property_id_begin: u32) -> u32 {
    //    unsafe { TODO: call ffi:goa_ticketing_override_properties() }
    //}
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::Ticketing>> Sealed for T {}
}

pub trait TicketingExt: IsA<Ticketing> + sealed::Sealed + 'static {
    #[doc(alias = "goa_ticketing_call_get_ticket")]
    fn call_get_ticket<P: FnOnce(Result<(), glib::Error>) + 'static>(&self, cancellable: Option<&impl IsA<gio::Cancellable>>, callback: P) {
        
                let main_context = glib::MainContext::ref_thread_default();
                let is_main_context_owner = main_context.is_owner();
                let has_acquired_main_context = (!is_main_context_owner)
                    .then(|| main_context.acquire().ok())
                    .flatten();
                assert!(
                    is_main_context_owner || has_acquired_main_context.is_some(),
                    "Async operations only allowed if the thread is owning the MainContext"
                );
        
        let user_data: Box_<glib::thread_guard::ThreadGuard<P>> = Box_::new(glib::thread_guard::ThreadGuard::new(callback));
        unsafe extern "C" fn call_get_ticket_trampoline<P: FnOnce(Result<(), glib::Error>) + 'static>(_source_object: *mut glib::gobject_ffi::GObject, res: *mut gio::ffi::GAsyncResult, user_data: glib::ffi::gpointer) {
            let mut error = ptr::null_mut();
            let _ = ffi::goa_ticketing_call_get_ticket_finish(_source_object as *mut _, res, &mut error);
            let result = if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) };
            let callback: Box_<glib::thread_guard::ThreadGuard<P>> = Box_::from_raw(user_data as *mut _);
            let callback: P = callback.into_inner();
            callback(result);
        }
        let callback = call_get_ticket_trampoline::<P>;
        unsafe {
            ffi::goa_ticketing_call_get_ticket(self.as_ref().to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, Some(callback), Box_::into_raw(user_data) as *mut _);
        }
    }

    
    fn call_get_ticket_future(&self) -> Pin<Box_<dyn std::future::Future<Output = Result<(), glib::Error>> + 'static>> {

        Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
            obj.call_get_ticket(
                Some(cancellable),
                move |res| {
                    send.resolve(res);
                },
            );
        }))
    }

    #[doc(alias = "goa_ticketing_call_get_ticket_sync")]
    fn call_get_ticket_sync(&self, cancellable: Option<&impl IsA<gio::Cancellable>>) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let is_ok = ffi::goa_ticketing_call_get_ticket_sync(self.as_ref().to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, &mut error);
            debug_assert_eq!(is_ok == glib::ffi::GFALSE, !error.is_null());
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    //#[doc(alias = "goa_ticketing_complete_get_ticket")]
    //fn complete_get_ticket(&self, invocation: /*Ignored*/gio::DBusMethodInvocation) {
    //    unsafe { TODO: call ffi:goa_ticketing_complete_get_ticket() }
    //}

    //#[cfg(feature = "v3_18")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v3_18")))]
    //#[doc(alias = "goa_ticketing_dup_details")]
    //fn dup_details(&self) -> /*Ignored*/Option<glib::Variant> {
    //    unsafe { TODO: call ffi:goa_ticketing_dup_details() }
    //}

    //#[cfg(feature = "v3_18")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v3_18")))]
    //#[doc(alias = "goa_ticketing_get_details")]
    //#[doc(alias = "get_details")]
    //fn details(&self) -> /*Ignored*/Option<glib::Variant> {
    //    unsafe { TODO: call ffi:goa_ticketing_get_details() }
    //}

    //#[cfg(feature = "v3_18")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v3_18")))]
    //#[doc(alias = "goa_ticketing_set_details")]
    //fn set_details(&self, value: /*Ignored*/&glib::Variant) {
    //    unsafe { TODO: call ffi:goa_ticketing_set_details() }
    //}

    //#[cfg(feature = "v3_6")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v3_6")))]
    //#[doc(alias = "handle-get-ticket")]
    //fn connect_handle_get_ticket<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //}

    #[cfg(feature = "v3_18")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v3_18")))]
    #[doc(alias = "details")]
    fn connect_details_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_details_trampoline<P: IsA<Ticketing>, F: Fn(&P) + 'static>(this: *mut ffi::GoaTicketing, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Ticketing::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::details\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_details_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<Ticketing>> TicketingExt for O {}

impl fmt::Display for Ticketing {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Ticketing")
    }
}
