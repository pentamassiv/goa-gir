// This file was generated by gir (https://github.com/gtk-rs/gir)
// from 
// from gir-files (git@github.com:gtk-rs/gir-files.git)
// DO NOT EDIT

use glib::{prelude::*,translate::*};
use std::{fmt};

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GoaError")]
pub enum Error {
    #[doc(alias = "GOA_ERROR_FAILED")]
    Failed,
    #[doc(alias = "GOA_ERROR_NOT_SUPPORTED")]
    NotSupported,
    #[doc(alias = "GOA_ERROR_DIALOG_DISMISSED")]
    DialogDismissed,
    #[doc(alias = "GOA_ERROR_ACCOUNT_EXISTS")]
    AccountExists,
    #[doc(alias = "GOA_ERROR_NOT_AUTHORIZED")]
    NotAuthorized,
    #[doc(alias = "GOA_ERROR_SSL")]
    Ssl,
#[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for Error {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Error::{}", match *self {
            Self::Failed => "Failed",
            Self::NotSupported => "NotSupported",
            Self::DialogDismissed => "DialogDismissed",
            Self::AccountExists => "AccountExists",
            Self::NotAuthorized => "NotAuthorized",
            Self::Ssl => "Ssl",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl IntoGlib for Error {
    type GlibType = ffi::GoaError;

    #[inline]
fn into_glib(self) -> ffi::GoaError {
match self {
            Self::Failed => ffi::GOA_ERROR_FAILED,
            Self::NotSupported => ffi::GOA_ERROR_NOT_SUPPORTED,
            Self::DialogDismissed => ffi::GOA_ERROR_DIALOG_DISMISSED,
            Self::AccountExists => ffi::GOA_ERROR_ACCOUNT_EXISTS,
            Self::NotAuthorized => ffi::GOA_ERROR_NOT_AUTHORIZED,
            Self::Ssl => ffi::GOA_ERROR_SSL,
            Self::__Unknown(value) => value,
}
}
}

#[doc(hidden)]
impl FromGlib<ffi::GoaError> for Error {
    #[inline]
unsafe fn from_glib(value: ffi::GoaError) -> Self {
        skip_assert_initialized!();
        
match value {
            ffi::GOA_ERROR_FAILED => Self::Failed,
            ffi::GOA_ERROR_NOT_SUPPORTED => Self::NotSupported,
            ffi::GOA_ERROR_DIALOG_DISMISSED => Self::DialogDismissed,
            ffi::GOA_ERROR_ACCOUNT_EXISTS => Self::AccountExists,
            ffi::GOA_ERROR_NOT_AUTHORIZED => Self::NotAuthorized,
            ffi::GOA_ERROR_SSL => Self::Ssl,
            value => Self::__Unknown(value),
}
}
}

impl glib::error::ErrorDomain for Error {
    #[inline]
    fn domain() -> glib::Quark {
        skip_assert_initialized!();
        
        unsafe { from_glib(ffi::goa_error_quark()) }
    }

    #[inline]
    fn code(self) -> i32 {
        self.into_glib()
    }

    #[inline]
    #[allow(clippy::match_single_binding)]
    fn from(code: i32) -> Option<Self> {
        skip_assert_initialized!();
        match unsafe { from_glib(code) } {
            Self::__Unknown(_) => Some(Self::Failed),
            value => Some(value),
}
    }
}

impl StaticType for Error {
    #[inline]
    fn static_type() -> glib::Type {
        unsafe { from_glib(ffi::goa_error_get_type()) }
    }
}

impl glib::HasParamSpec for Error {
                type ParamSpec = glib::ParamSpecEnum;
                type SetValue = Self;
                type BuilderFn = fn(&str, Self) -> glib::ParamSpecEnumBuilder<Self>;
    
                fn param_spec_builder() -> Self::BuilderFn {
                    |name, default_value| Self::ParamSpec::builder_with_default(name, default_value)
                }
}

impl glib::value::ValueType for Error {
    type Type = Self;
}

unsafe impl<'a> glib::value::FromValue<'a> for Error {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    #[inline]
    unsafe fn from_value(value: &'a glib::Value) -> Self {
        skip_assert_initialized!();
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for Error {
    #[inline]
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    #[inline]
    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

impl From<Error> for glib::Value {
    #[inline]
    fn from(v: Error) -> Self {
        skip_assert_initialized!();
        ToValue::to_value(&v)
    }
}

