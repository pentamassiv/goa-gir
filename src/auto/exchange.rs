// This file was generated by gir (https://github.com/gtk-rs/gir)
// from 
// from gir-files (git@github.com:gtk-rs/gir-files.git)
// DO NOT EDIT

use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_,fmt,mem::transmute};

glib::wrapper! {
    #[doc(alias = "GoaExchange")]
    pub struct Exchange(Interface<ffi::GoaExchange, ffi::GoaExchangeIface>);

    match fn {
        type_ => || ffi::goa_exchange_get_type(),
    }
}

impl Exchange {
        pub const NONE: Option<&'static Exchange> = None;
    

    //#[doc(alias = "goa_exchange_interface_info")]
    //pub fn interface_info() -> /*Ignored*/Option<gio::DBusInterfaceInfo> {
    //    unsafe { TODO: call ffi:goa_exchange_interface_info() }
    //}

    //#[doc(alias = "goa_exchange_override_properties")]
    //pub fn override_properties(klass: /*Ignored*/&mut glib::ObjectClass, property_id_begin: u32) -> u32 {
    //    unsafe { TODO: call ffi:goa_exchange_override_properties() }
    //}
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::Exchange>> Sealed for T {}
}

pub trait ExchangeExt: IsA<Exchange> + sealed::Sealed + 'static {
    #[doc(alias = "goa_exchange_dup_host")]
    fn dup_host(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::goa_exchange_dup_host(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(feature = "v3_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v3_8")))]
    #[doc(alias = "goa_exchange_get_accept_ssl_errors")]
    #[doc(alias = "get_accept_ssl_errors")]
    fn accepts_ssl_errors(&self) -> bool {
        unsafe {
            from_glib(ffi::goa_exchange_get_accept_ssl_errors(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "goa_exchange_get_host")]
    #[doc(alias = "get_host")]
    fn host(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::goa_exchange_get_host(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(feature = "v3_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v3_8")))]
    #[doc(alias = "goa_exchange_set_accept_ssl_errors")]
    fn set_accept_ssl_errors(&self, value: bool) {
        unsafe {
            ffi::goa_exchange_set_accept_ssl_errors(self.as_ref().to_glib_none().0, value.into_glib());
        }
    }

    #[doc(alias = "goa_exchange_set_host")]
    fn set_host(&self, value: &str) {
        unsafe {
            ffi::goa_exchange_set_host(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[cfg(feature = "v3_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v3_8")))]
    #[doc(alias = "accept-ssl-errors")]
    fn connect_accept_ssl_errors_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_accept_ssl_errors_trampoline<P: IsA<Exchange>, F: Fn(&P) + 'static>(this: *mut ffi::GoaExchange, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Exchange::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::accept-ssl-errors\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_accept_ssl_errors_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v3_6")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v3_6")))]
    #[doc(alias = "host")]
    fn connect_host_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_host_trampoline<P: IsA<Exchange>, F: Fn(&P) + 'static>(this: *mut ffi::GoaExchange, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Exchange::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::host\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_host_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<Exchange>> ExchangeExt for O {}

impl fmt::Display for Exchange {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Exchange")
    }
}
