// This file was generated by gir (https://github.com/gtk-rs/gir)
// from 
// from gir-files (git@github.com:gtk-rs/gir-files.git)
// DO NOT EDIT

use glib::{prelude::*,translate::*};
use std::{boxed::Box as Box_,fmt,mem,pin::Pin,ptr};

glib::wrapper! {
    #[doc(alias = "GoaManager")]
    pub struct Manager(Interface<ffi::GoaManager, ffi::GoaManagerIface>);

    match fn {
        type_ => || ffi::goa_manager_get_type(),
    }
}

impl Manager {
        pub const NONE: Option<&'static Manager> = None;
    

    //#[doc(alias = "goa_manager_interface_info")]
    //pub fn interface_info() -> /*Ignored*/Option<gio::DBusInterfaceInfo> {
    //    unsafe { TODO: call ffi:goa_manager_interface_info() }
    //}

    //#[doc(alias = "goa_manager_override_properties")]
    //pub fn override_properties(klass: /*Ignored*/&mut glib::ObjectClass, property_id_begin: u32) -> u32 {
    //    unsafe { TODO: call ffi:goa_manager_override_properties() }
    //}
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::Manager>> Sealed for T {}
}

pub trait ManagerExt: IsA<Manager> + sealed::Sealed + 'static {
    //#[doc(alias = "goa_manager_call_add_account")]
    //fn call_add_account<P: FnOnce(Result<glib::GString, glib::Error>) + 'static>(&self, arg_provider: &str, arg_identity: &str, arg_presentation_identity: &str, arg_credentials: /*Ignored*/&glib::Variant, arg_details: /*Ignored*/&glib::Variant, cancellable: Option<&impl IsA<gio::Cancellable>>, callback: P) {
    //    unsafe { TODO: call ffi:goa_manager_call_add_account() }
    //}

    //
    //fn call_add_account_future(&self, arg_provider: &str, arg_identity: &str, arg_presentation_identity: &str, arg_credentials: /*Ignored*/&glib::Variant, arg_details: /*Ignored*/&glib::Variant) -> Pin<Box_<dyn std::future::Future<Output = Result<glib::GString, glib::Error>> + 'static>> {

        //let arg_provider = String::from(arg_provider);
        //let arg_identity = String::from(arg_identity);
        //let arg_presentation_identity = String::from(arg_presentation_identity);
        //let arg_credentials = arg_credentials.clone();
        //let arg_details = arg_details.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_add_account(
        //        &arg_provider,
        //        &arg_identity,
        //        &arg_presentation_identity,
        //        &arg_credentials,
        //        &arg_details,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[doc(alias = "goa_manager_call_add_account_sync")]
    //fn call_add_account_sync(&self, arg_provider: &str, arg_identity: &str, arg_presentation_identity: &str, arg_credentials: /*Ignored*/&glib::Variant, arg_details: /*Ignored*/&glib::Variant, cancellable: Option<&impl IsA<gio::Cancellable>>) -> Result<glib::GString, glib::Error> {
    //    unsafe { TODO: call ffi:goa_manager_call_add_account_sync() }
    //}

    #[doc(alias = "goa_manager_call_is_supported_provider")]
    fn call_is_supported_provider<P: FnOnce(Result<bool, glib::Error>) + 'static>(&self, arg_provider_type: &str, cancellable: Option<&impl IsA<gio::Cancellable>>, callback: P) {
        
                let main_context = glib::MainContext::ref_thread_default();
                let is_main_context_owner = main_context.is_owner();
                let has_acquired_main_context = (!is_main_context_owner)
                    .then(|| main_context.acquire().ok())
                    .flatten();
                assert!(
                    is_main_context_owner || has_acquired_main_context.is_some(),
                    "Async operations only allowed if the thread is owning the MainContext"
                );
        
        let user_data: Box_<glib::thread_guard::ThreadGuard<P>> = Box_::new(glib::thread_guard::ThreadGuard::new(callback));
        unsafe extern "C" fn call_is_supported_provider_trampoline<P: FnOnce(Result<bool, glib::Error>) + 'static>(_source_object: *mut glib::gobject_ffi::GObject, res: *mut gio::ffi::GAsyncResult, user_data: glib::ffi::gpointer) {
            let mut error = ptr::null_mut();
            let mut out_is_supported = mem::MaybeUninit::uninit();
            let _ = ffi::goa_manager_call_is_supported_provider_finish(_source_object as *mut _, out_is_supported.as_mut_ptr(), res, &mut error);
            let result = if error.is_null() { Ok(from_glib(out_is_supported.assume_init())) } else { Err(from_glib_full(error)) };
            let callback: Box_<glib::thread_guard::ThreadGuard<P>> = Box_::from_raw(user_data as *mut _);
            let callback: P = callback.into_inner();
            callback(result);
        }
        let callback = call_is_supported_provider_trampoline::<P>;
        unsafe {
            ffi::goa_manager_call_is_supported_provider(self.as_ref().to_glib_none().0, arg_provider_type.to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, Some(callback), Box_::into_raw(user_data) as *mut _);
        }
    }

    
    fn call_is_supported_provider_future(&self, arg_provider_type: &str) -> Pin<Box_<dyn std::future::Future<Output = Result<bool, glib::Error>> + 'static>> {

        let arg_provider_type = String::from(arg_provider_type);
        Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
            obj.call_is_supported_provider(
                &arg_provider_type,
                Some(cancellable),
                move |res| {
                    send.resolve(res);
                },
            );
        }))
    }

    #[doc(alias = "goa_manager_call_is_supported_provider_sync")]
    fn call_is_supported_provider_sync(&self, arg_provider_type: &str, cancellable: Option<&impl IsA<gio::Cancellable>>) -> Result<bool, glib::Error> {
        unsafe {
            let mut out_is_supported = mem::MaybeUninit::uninit();
            let mut error = ptr::null_mut();
            let is_ok = ffi::goa_manager_call_is_supported_provider_sync(self.as_ref().to_glib_none().0, arg_provider_type.to_glib_none().0, out_is_supported.as_mut_ptr(), cancellable.map(|p| p.as_ref()).to_glib_none().0, &mut error);
            debug_assert_eq!(is_ok == glib::ffi::GFALSE, !error.is_null());
            if error.is_null() { Ok(from_glib(out_is_supported.assume_init())) } else { Err(from_glib_full(error)) }
        }
    }

    //#[doc(alias = "goa_manager_complete_add_account")]
    //fn complete_add_account(&self, invocation: /*Ignored*/gio::DBusMethodInvocation, account_object_path: &str) {
    //    unsafe { TODO: call ffi:goa_manager_complete_add_account() }
    //}

    //#[doc(alias = "goa_manager_complete_is_supported_provider")]
    //fn complete_is_supported_provider(&self, invocation: /*Ignored*/gio::DBusMethodInvocation, is_supported: bool) {
    //    unsafe { TODO: call ffi:goa_manager_complete_is_supported_provider() }
    //}

    //#[doc(alias = "handle-add-account")]
    //fn connect_handle_add_account<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //    Ignored arg_credentials: GLib.Variant
    //    Ignored arg_details: GLib.Variant
    //}

    //#[doc(alias = "handle-is-supported-provider")]
    //fn connect_handle_is_supported_provider<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //}
}

impl<O: IsA<Manager>> ManagerExt for O {}

impl fmt::Display for Manager {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Manager")
    }
}
