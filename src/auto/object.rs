// This file was generated by gir (https://github.com/gtk-rs/gir)
// from 
// from gir-files (git@github.com:gtk-rs/gir-files.git)
// DO NOT EDIT

use crate::{Account,Calendar,Chat,Contacts,Documents,Mail,Manager,OAuth2Based,OAuthBased};
#[cfg(feature = "v3_6")]
#[cfg_attr(docsrs, doc(cfg(feature = "v3_6")))]
use crate::{Exchange,PasswordBased,Ticketing};
#[cfg(feature = "v3_8")]
#[cfg_attr(docsrs, doc(cfg(feature = "v3_8")))]
use crate::{Files,Photos};
#[cfg(feature = "v3_12")]
#[cfg_attr(docsrs, doc(cfg(feature = "v3_12")))]
use crate::{Printers,ReadLater};
#[cfg(feature = "v3_14")]
#[cfg_attr(docsrs, doc(cfg(feature = "v3_14")))]
use crate::{Maps,MediaServer};
#[cfg(feature = "v3_18")]
#[cfg_attr(docsrs, doc(cfg(feature = "v3_18")))]
use crate::{Music};
#[cfg(feature = "v3_26")]
#[cfg_attr(docsrs, doc(cfg(feature = "v3_26")))]
use crate::{Todo};
use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_,fmt,mem::transmute};

glib::wrapper! {
    #[doc(alias = "GoaObject")]
    pub struct Object(Interface<ffi::GoaObject, ffi::GoaObjectIface>);

    match fn {
        type_ => || ffi::goa_object_get_type(),
    }
}

impl Object {
        pub const NONE: Option<&'static Object> = None;
    
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::Object>> Sealed for T {}
}

pub trait GoaObjectExt: IsA<Object> + sealed::Sealed + 'static {
    #[doc(alias = "goa_object_get_account")]
    #[doc(alias = "get_account")]
    fn account(&self) -> Option<Account> {
        unsafe {
            from_glib_full(ffi::goa_object_get_account(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "goa_object_get_calendar")]
    #[doc(alias = "get_calendar")]
    fn calendar(&self) -> Option<Calendar> {
        unsafe {
            from_glib_full(ffi::goa_object_get_calendar(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "goa_object_get_chat")]
    #[doc(alias = "get_chat")]
    fn chat(&self) -> Option<Chat> {
        unsafe {
            from_glib_full(ffi::goa_object_get_chat(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "goa_object_get_contacts")]
    #[doc(alias = "get_contacts")]
    fn contacts(&self) -> Option<Contacts> {
        unsafe {
            from_glib_full(ffi::goa_object_get_contacts(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "goa_object_get_documents")]
    #[doc(alias = "get_documents")]
    fn documents(&self) -> Option<Documents> {
        unsafe {
            from_glib_full(ffi::goa_object_get_documents(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(feature = "v3_6")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v3_6")))]
    #[doc(alias = "goa_object_get_exchange")]
    #[doc(alias = "get_exchange")]
    fn exchange(&self) -> Option<Exchange> {
        unsafe {
            from_glib_full(ffi::goa_object_get_exchange(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(feature = "v3_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v3_8")))]
    #[doc(alias = "goa_object_get_files")]
    #[doc(alias = "get_files")]
    fn files(&self) -> Option<Files> {
        unsafe {
            from_glib_full(ffi::goa_object_get_files(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "goa_object_get_mail")]
    #[doc(alias = "get_mail")]
    fn mail(&self) -> Option<Mail> {
        unsafe {
            from_glib_full(ffi::goa_object_get_mail(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "goa_object_get_manager")]
    #[doc(alias = "get_manager")]
    fn manager(&self) -> Option<Manager> {
        unsafe {
            from_glib_full(ffi::goa_object_get_manager(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(feature = "v3_14")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v3_14")))]
    #[doc(alias = "goa_object_get_maps")]
    #[doc(alias = "get_maps")]
    fn maps(&self) -> Option<Maps> {
        unsafe {
            from_glib_full(ffi::goa_object_get_maps(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(feature = "v3_14")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v3_14")))]
    #[doc(alias = "goa_object_get_media_server")]
    #[doc(alias = "get_media_server")]
    fn media_server(&self) -> Option<MediaServer> {
        unsafe {
            from_glib_full(ffi::goa_object_get_media_server(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(feature = "v3_18")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v3_18")))]
    #[doc(alias = "goa_object_get_music")]
    #[doc(alias = "get_music")]
    fn music(&self) -> Option<Music> {
        unsafe {
            from_glib_full(ffi::goa_object_get_music(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "goa_object_get_oauth2_based")]
    #[doc(alias = "get_oauth2_based")]
    fn oauth2_based(&self) -> Option<OAuth2Based> {
        unsafe {
            from_glib_full(ffi::goa_object_get_oauth2_based(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "goa_object_get_oauth_based")]
    #[doc(alias = "get_oauth_based")]
    fn oauth_based(&self) -> Option<OAuthBased> {
        unsafe {
            from_glib_full(ffi::goa_object_get_oauth_based(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(feature = "v3_6")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v3_6")))]
    #[doc(alias = "goa_object_get_password_based")]
    #[doc(alias = "get_password_based")]
    fn password_based(&self) -> Option<PasswordBased> {
        unsafe {
            from_glib_full(ffi::goa_object_get_password_based(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(feature = "v3_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v3_8")))]
    #[doc(alias = "goa_object_get_photos")]
    #[doc(alias = "get_photos")]
    fn photos(&self) -> Option<Photos> {
        unsafe {
            from_glib_full(ffi::goa_object_get_photos(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(feature = "v3_12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v3_12")))]
    #[doc(alias = "goa_object_get_printers")]
    #[doc(alias = "get_printers")]
    fn printers(&self) -> Option<Printers> {
        unsafe {
            from_glib_full(ffi::goa_object_get_printers(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(feature = "v3_12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v3_12")))]
    #[doc(alias = "goa_object_get_read_later")]
    #[doc(alias = "get_read_later")]
    fn read_later(&self) -> Option<ReadLater> {
        unsafe {
            from_glib_full(ffi::goa_object_get_read_later(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(feature = "v3_6")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v3_6")))]
    #[doc(alias = "goa_object_get_ticketing")]
    #[doc(alias = "get_ticketing")]
    fn ticketing(&self) -> Option<Ticketing> {
        unsafe {
            from_glib_full(ffi::goa_object_get_ticketing(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(feature = "v3_26")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v3_26")))]
    #[doc(alias = "goa_object_get_todo")]
    #[doc(alias = "get_todo")]
    fn todo(&self) -> Option<Todo> {
        unsafe {
            from_glib_full(ffi::goa_object_get_todo(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "goa_object_peek_account")]
    fn peek_account(&self) -> Option<Account> {
        unsafe {
            from_glib_none(ffi::goa_object_peek_account(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "goa_object_peek_calendar")]
    fn peek_calendar(&self) -> Option<Calendar> {
        unsafe {
            from_glib_none(ffi::goa_object_peek_calendar(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "goa_object_peek_chat")]
    fn peek_chat(&self) -> Option<Chat> {
        unsafe {
            from_glib_none(ffi::goa_object_peek_chat(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "goa_object_peek_contacts")]
    fn peek_contacts(&self) -> Option<Contacts> {
        unsafe {
            from_glib_none(ffi::goa_object_peek_contacts(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "goa_object_peek_documents")]
    fn peek_documents(&self) -> Option<Documents> {
        unsafe {
            from_glib_none(ffi::goa_object_peek_documents(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(feature = "v3_6")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v3_6")))]
    #[doc(alias = "goa_object_peek_exchange")]
    fn peek_exchange(&self) -> Option<Exchange> {
        unsafe {
            from_glib_none(ffi::goa_object_peek_exchange(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(feature = "v3_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v3_8")))]
    #[doc(alias = "goa_object_peek_files")]
    fn peek_files(&self) -> Option<Files> {
        unsafe {
            from_glib_none(ffi::goa_object_peek_files(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "goa_object_peek_mail")]
    fn peek_mail(&self) -> Option<Mail> {
        unsafe {
            from_glib_none(ffi::goa_object_peek_mail(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "goa_object_peek_manager")]
    fn peek_manager(&self) -> Option<Manager> {
        unsafe {
            from_glib_none(ffi::goa_object_peek_manager(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(feature = "v3_14")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v3_14")))]
    #[doc(alias = "goa_object_peek_maps")]
    fn peek_maps(&self) -> Option<Maps> {
        unsafe {
            from_glib_none(ffi::goa_object_peek_maps(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(feature = "v3_14")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v3_14")))]
    #[doc(alias = "goa_object_peek_media_server")]
    fn peek_media_server(&self) -> Option<MediaServer> {
        unsafe {
            from_glib_none(ffi::goa_object_peek_media_server(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(feature = "v3_18")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v3_18")))]
    #[doc(alias = "goa_object_peek_music")]
    fn peek_music(&self) -> Option<Music> {
        unsafe {
            from_glib_none(ffi::goa_object_peek_music(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "goa_object_peek_oauth2_based")]
    fn peek_oauth2_based(&self) -> Option<OAuth2Based> {
        unsafe {
            from_glib_none(ffi::goa_object_peek_oauth2_based(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "goa_object_peek_oauth_based")]
    fn peek_oauth_based(&self) -> Option<OAuthBased> {
        unsafe {
            from_glib_none(ffi::goa_object_peek_oauth_based(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(feature = "v3_6")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v3_6")))]
    #[doc(alias = "goa_object_peek_password_based")]
    fn peek_password_based(&self) -> Option<PasswordBased> {
        unsafe {
            from_glib_none(ffi::goa_object_peek_password_based(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(feature = "v3_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v3_8")))]
    #[doc(alias = "goa_object_peek_photos")]
    fn peek_photos(&self) -> Option<Photos> {
        unsafe {
            from_glib_none(ffi::goa_object_peek_photos(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(feature = "v3_12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v3_12")))]
    #[doc(alias = "goa_object_peek_printers")]
    fn peek_printers(&self) -> Option<Printers> {
        unsafe {
            from_glib_none(ffi::goa_object_peek_printers(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(feature = "v3_12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v3_12")))]
    #[doc(alias = "goa_object_peek_read_later")]
    fn peek_read_later(&self) -> Option<ReadLater> {
        unsafe {
            from_glib_none(ffi::goa_object_peek_read_later(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(feature = "v3_6")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v3_6")))]
    #[doc(alias = "goa_object_peek_ticketing")]
    fn peek_ticketing(&self) -> Option<Ticketing> {
        unsafe {
            from_glib_none(ffi::goa_object_peek_ticketing(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(feature = "v3_26")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v3_26")))]
    #[doc(alias = "goa_object_peek_todo")]
    fn peek_todo(&self) -> Option<Todo> {
        unsafe {
            from_glib_none(ffi::goa_object_peek_todo(self.as_ref().to_glib_none().0))
        }
    }

    fn set_account<P: IsA<Account>>(&self, account: Option<&P>) {
        ObjectExt::set_property(self.as_ref(),"account", account)
    }

    fn set_calendar<P: IsA<Calendar>>(&self, calendar: Option<&P>) {
        ObjectExt::set_property(self.as_ref(),"calendar", calendar)
    }

    fn set_chat<P: IsA<Chat>>(&self, chat: Option<&P>) {
        ObjectExt::set_property(self.as_ref(),"chat", chat)
    }

    fn set_contacts<P: IsA<Contacts>>(&self, contacts: Option<&P>) {
        ObjectExt::set_property(self.as_ref(),"contacts", contacts)
    }

    fn set_documents<P: IsA<Documents>>(&self, documents: Option<&P>) {
        ObjectExt::set_property(self.as_ref(),"documents", documents)
    }

    #[cfg(feature = "v3_6")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v3_6")))]
    fn set_exchange<P: IsA<Exchange>>(&self, exchange: Option<&P>) {
        ObjectExt::set_property(self.as_ref(),"exchange", exchange)
    }

    #[cfg(feature = "v3_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v3_8")))]
    fn set_files<P: IsA<Files>>(&self, files: Option<&P>) {
        ObjectExt::set_property(self.as_ref(),"files", files)
    }

    fn set_mail<P: IsA<Mail>>(&self, mail: Option<&P>) {
        ObjectExt::set_property(self.as_ref(),"mail", mail)
    }

    fn set_manager<P: IsA<Manager>>(&self, manager: Option<&P>) {
        ObjectExt::set_property(self.as_ref(),"manager", manager)
    }

    #[cfg(feature = "v3_14")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v3_14")))]
    fn set_maps<P: IsA<Maps>>(&self, maps: Option<&P>) {
        ObjectExt::set_property(self.as_ref(),"maps", maps)
    }

    #[cfg(feature = "v3_14")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v3_14")))]
    #[doc(alias = "media-server")]
    fn set_media_server<P: IsA<MediaServer>>(&self, media_server: Option<&P>) {
        ObjectExt::set_property(self.as_ref(),"media-server", media_server)
    }

    #[cfg(feature = "v3_18")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v3_18")))]
    fn set_music<P: IsA<Music>>(&self, music: Option<&P>) {
        ObjectExt::set_property(self.as_ref(),"music", music)
    }

    #[doc(alias = "oauth-based")]
    fn set_oauth_based<P: IsA<OAuthBased>>(&self, oauth_based: Option<&P>) {
        ObjectExt::set_property(self.as_ref(),"oauth-based", oauth_based)
    }

    #[doc(alias = "oauth2-based")]
    fn set_oauth2_based<P: IsA<OAuth2Based>>(&self, oauth2_based: Option<&P>) {
        ObjectExt::set_property(self.as_ref(),"oauth2-based", oauth2_based)
    }

    #[cfg(feature = "v3_6")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v3_6")))]
    #[doc(alias = "password-based")]
    fn set_password_based<P: IsA<PasswordBased>>(&self, password_based: Option<&P>) {
        ObjectExt::set_property(self.as_ref(),"password-based", password_based)
    }

    #[cfg(feature = "v3_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v3_8")))]
    fn set_photos<P: IsA<Photos>>(&self, photos: Option<&P>) {
        ObjectExt::set_property(self.as_ref(),"photos", photos)
    }

    #[cfg(feature = "v3_12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v3_12")))]
    fn set_printers<P: IsA<Printers>>(&self, printers: Option<&P>) {
        ObjectExt::set_property(self.as_ref(),"printers", printers)
    }

    #[cfg(feature = "v3_12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v3_12")))]
    #[doc(alias = "read-later")]
    fn set_read_later<P: IsA<ReadLater>>(&self, read_later: Option<&P>) {
        ObjectExt::set_property(self.as_ref(),"read-later", read_later)
    }

    #[cfg(feature = "v3_6")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v3_6")))]
    fn set_ticketing<P: IsA<Ticketing>>(&self, ticketing: Option<&P>) {
        ObjectExt::set_property(self.as_ref(),"ticketing", ticketing)
    }

    #[cfg(feature = "v3_26")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v3_26")))]
    fn set_todo<P: IsA<Todo>>(&self, todo: Option<&P>) {
        ObjectExt::set_property(self.as_ref(),"todo", todo)
    }

    #[doc(alias = "account")]
    fn connect_account_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_account_trampoline<P: IsA<Object>, F: Fn(&P) + 'static>(this: *mut ffi::GoaObject, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Object::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::account\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_account_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "calendar")]
    fn connect_calendar_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_calendar_trampoline<P: IsA<Object>, F: Fn(&P) + 'static>(this: *mut ffi::GoaObject, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Object::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::calendar\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_calendar_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "chat")]
    fn connect_chat_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_chat_trampoline<P: IsA<Object>, F: Fn(&P) + 'static>(this: *mut ffi::GoaObject, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Object::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::chat\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_chat_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "contacts")]
    fn connect_contacts_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_contacts_trampoline<P: IsA<Object>, F: Fn(&P) + 'static>(this: *mut ffi::GoaObject, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Object::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::contacts\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_contacts_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "documents")]
    fn connect_documents_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_documents_trampoline<P: IsA<Object>, F: Fn(&P) + 'static>(this: *mut ffi::GoaObject, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Object::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::documents\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_documents_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v3_6")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v3_6")))]
    #[doc(alias = "exchange")]
    fn connect_exchange_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_exchange_trampoline<P: IsA<Object>, F: Fn(&P) + 'static>(this: *mut ffi::GoaObject, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Object::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::exchange\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_exchange_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v3_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v3_8")))]
    #[doc(alias = "files")]
    fn connect_files_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_files_trampoline<P: IsA<Object>, F: Fn(&P) + 'static>(this: *mut ffi::GoaObject, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Object::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::files\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_files_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "mail")]
    fn connect_mail_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_mail_trampoline<P: IsA<Object>, F: Fn(&P) + 'static>(this: *mut ffi::GoaObject, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Object::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::mail\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_mail_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "manager")]
    fn connect_manager_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_manager_trampoline<P: IsA<Object>, F: Fn(&P) + 'static>(this: *mut ffi::GoaObject, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Object::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::manager\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_manager_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v3_14")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v3_14")))]
    #[doc(alias = "maps")]
    fn connect_maps_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_maps_trampoline<P: IsA<Object>, F: Fn(&P) + 'static>(this: *mut ffi::GoaObject, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Object::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::maps\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_maps_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v3_14")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v3_14")))]
    #[doc(alias = "media-server")]
    fn connect_media_server_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_media_server_trampoline<P: IsA<Object>, F: Fn(&P) + 'static>(this: *mut ffi::GoaObject, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Object::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::media-server\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_media_server_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v3_18")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v3_18")))]
    #[doc(alias = "music")]
    fn connect_music_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_music_trampoline<P: IsA<Object>, F: Fn(&P) + 'static>(this: *mut ffi::GoaObject, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Object::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::music\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_music_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "oauth-based")]
    fn connect_oauth_based_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_oauth_based_trampoline<P: IsA<Object>, F: Fn(&P) + 'static>(this: *mut ffi::GoaObject, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Object::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::oauth-based\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_oauth_based_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "oauth2-based")]
    fn connect_oauth2_based_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_oauth2_based_trampoline<P: IsA<Object>, F: Fn(&P) + 'static>(this: *mut ffi::GoaObject, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Object::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::oauth2-based\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_oauth2_based_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v3_6")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v3_6")))]
    #[doc(alias = "password-based")]
    fn connect_password_based_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_password_based_trampoline<P: IsA<Object>, F: Fn(&P) + 'static>(this: *mut ffi::GoaObject, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Object::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::password-based\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_password_based_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v3_8")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v3_8")))]
    #[doc(alias = "photos")]
    fn connect_photos_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_photos_trampoline<P: IsA<Object>, F: Fn(&P) + 'static>(this: *mut ffi::GoaObject, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Object::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::photos\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_photos_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v3_12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v3_12")))]
    #[doc(alias = "printers")]
    fn connect_printers_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_printers_trampoline<P: IsA<Object>, F: Fn(&P) + 'static>(this: *mut ffi::GoaObject, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Object::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::printers\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_printers_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v3_12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v3_12")))]
    #[doc(alias = "read-later")]
    fn connect_read_later_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_read_later_trampoline<P: IsA<Object>, F: Fn(&P) + 'static>(this: *mut ffi::GoaObject, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Object::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::read-later\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_read_later_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v3_6")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v3_6")))]
    #[doc(alias = "ticketing")]
    fn connect_ticketing_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_ticketing_trampoline<P: IsA<Object>, F: Fn(&P) + 'static>(this: *mut ffi::GoaObject, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Object::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::ticketing\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_ticketing_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v3_26")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v3_26")))]
    #[doc(alias = "todo")]
    fn connect_todo_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_todo_trampoline<P: IsA<Object>, F: Fn(&P) + 'static>(this: *mut ffi::GoaObject, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Object::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::todo\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_todo_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<Object>> GoaObjectExt for O {}

impl fmt::Display for Object {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Object")
    }
}
